# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/solargraph/all/solargraph.rbi
#
# solargraph-0.56.2

module Solargraph
  def self.assert_or_log(type, msg = nil, &block); end
  def self.asserts_on?(type); end
  def self.logger; end
  def self.with_clean_env(&block); end
end
class Solargraph::DomainDirective < YARD::Tags::Directive
  def call; end
end
class YARD::Tags::Library
  def override_directive(tag, parser); end
  def type_tag(text); end
end
module Solargraph::Parser
  extend Solargraph::Parser::ParserGem::ClassMethods
end
module Solargraph::Parser::ParserGem
end
module Solargraph::Parser::ParserGem::ClassMethods
  def chain(*args); end
  def chain_string(*args); end
  def infer_literal_node_type(node); end
  def inner_node_references(name, top); end
  def is_ast_node?(node); end
  def map(source); end
  def node_range(node); end
  def parse(code, filename = nil, line = nil); end
  def parse_with_comments(code, filename = nil); end
  def parser; end
  def process_node(*args); end
  def references(source, name); end
  def string_ranges(node); end
  def version; end
end
module Solargraph::Parser::ParserGem::NodeMethods
  def any_splatted_call?(nodes); end
  def call_nodes_from(node); end
  def const_nodes_from(node); end
  def convert_hash(node); end
  def drill_signature(node, signature); end
  def find_recipient_node(cursor); end
  def get_node_end_position(node); end
  def get_node_start_position(node); end
  def infer_literal_node_type(node); end
  def pack_name(node); end
  def repaired_find_recipient_node(cursor); end
  def returns_from_method_body(node); end
  def self.any_splatted_call?(nodes); end
  def self.call_nodes_from(node); end
  def self.const_nodes_from(node); end
  def self.convert_hash(node); end
  def self.drill_signature(node, signature); end
  def self.find_recipient_node(cursor); end
  def self.get_node_end_position(node); end
  def self.get_node_start_position(node); end
  def self.infer_literal_node_type(node); end
  def self.pack_name(node); end
  def self.repaired_find_recipient_node(cursor); end
  def self.returns_from_method_body(node); end
  def self.splatted_call?(node); end
  def self.splatted_hash?(node); end
  def self.unpack_name(node); end
  def self.value_position_nodes_only(node); end
  def splatted_call?(node); end
  def splatted_hash?(node); end
  def unpack_name(node); end
  def value_position_nodes_only(node); end
end
module Solargraph::Parser::ParserGem::NodeMethods::DeepInference
  def self.explicit_return_values_from_compound_statement(parent); end
  def self.from_method_body(node); end
  def self.from_value_position_compound_statement(parent); end
  def self.from_value_position_statement(node, include_explicit_returns: nil); end
  def self.reduce_to_value_nodes(nodes); end
  def self.value_position_nodes_only(node); end
end
class Solargraph::Parser::SyntaxError < StandardError
end
module Solargraph::Parser::NodeProcessor
  def self.deregister(type, cls); end
  def self.process(node, region = nil, pins = nil, locals = nil); end
  def self.register(type, cls); end
end
class Solargraph::Parser::NodeProcessor::Base
  def block_pin(position); end
  def closure_pin(position); end
  def comments_for(node); end
  def get_node_location(node); end
  def initialize(node, region, pins, locals); end
  def locals; end
  def named_path_pin(position); end
  def node; end
  def pins; end
  def process; end
  def process_children(subregion = nil); end
  def region; end
end
module Solargraph::Parser::ParserGem::NodeProcessors
end
class Solargraph::Parser::ParserGem::NodeProcessors::BeginNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::ResbodyNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::DefNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::DefsNode < Solargraph::Parser::ParserGem::NodeProcessors::DefNode
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::IfNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::SendNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  def process_alias_method; end
  def process_attribute; end
  def process_autoload; end
  def process_extend; end
  def process_include; end
  def process_module_function; end
  def process_prepend; end
  def process_private_class_method; end
  def process_private_constant; end
  def process_require; end
  def process_visibility; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Environ
  def clear; end
  def domains; end
  def initialize(requires: nil, domains: nil, pins: nil); end
  def merge(other); end
  def pins; end
  def requires; end
end
module Solargraph::Convention
  def self.for_global(doc_map); end
  def self.for_local(source_map); end
  def self.register(convention); end
end
class Solargraph::Convention::Base
  def global(doc_map); end
  def local(source_map); end
end
class Solargraph::Convention::Gemfile < Solargraph::Convention::Base
  def local(source_map); end
end
class Solargraph::Convention::Gemspec < Solargraph::Convention::Base
  def local(source_map); end
end
class Solargraph::Convention::Rakefile < Solargraph::Convention::Base
  def local(source_map); end
end
module Solargraph::Convention::StructDefinition
end
module Solargraph::Convention::StructDefinition::NodeProcessors
end
class Solargraph::Convention::StructDefinition::NodeProcessors::StructNode < Solargraph::Parser::NodeProcessor::Base
  def attribute_comment(tag, for_setter); end
  def docstring; end
  def parse_comments; end
  def process; end
  def struct_definition_node; end
end
module Solargraph::Convention::DataDefinition
end
module Solargraph::Convention::DataDefinition::NodeProcessors
end
class Solargraph::Convention::DataDefinition::NodeProcessors::DataNode < Solargraph::Parser::NodeProcessor::Base
  def attribute_comments(attribute_node, attribute_name); end
  def data_definition_node; end
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::NamespaceNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::SclassNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::IvasgnNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::CvasgnNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::LvasgnNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::GvasgnNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::CasgnNode < Solargraph::Parser::NodeProcessor::Base
  def const_name; end
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::MasgnNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::AliasNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::ArgsNode < Solargraph::Parser::NodeProcessor::Base
  def forward(callable); end
  def get_decl(node); end
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::BlockNode < Solargraph::Parser::NodeProcessor::Base
  def other_class_eval?; end
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::OrasgnNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::OpasgnNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::SymNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
end
class Solargraph::Parser::ParserGem::NodeProcessors::UntilNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::WhileNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::Parser::ParserGem::NodeProcessors::AndNode < Solargraph::Parser::NodeProcessor::Base
  def process; end
  include Solargraph::Parser::ParserGem::NodeMethods
end
class Solargraph::InvalidOffsetError < RangeError
end
class Solargraph::DiagnosticsError < RuntimeError
end
class Solargraph::FileNotFoundError < RuntimeError
end
class Solargraph::SourceNotAvailableError < StandardError
end
class Solargraph::ComplexTypeError < StandardError
end
class Solargraph::WorkspaceTooLargeError < RuntimeError
end
class Solargraph::BundleNotFoundError < StandardError
end
class Solargraph::InvalidRubocopVersionError < RuntimeError
end
